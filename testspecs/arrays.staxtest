	name:SingleUniqueElement
	in
[3 3 3]
	out
1
	stax
:u
	name:NonSingleUniqueElement
	in
[3 3 3 4]
	out
0
	stax
:u
	name:Flatten
	in
[[1 2] [3 4]]
	out
1 2 3 4
	stax
:f J
	name:GetIndexOfAll
	in
hello
	out
1 4
	stax
"eo" :I J
	name:AllLeftRotations
	in
ABC
	out
ABC BCA CAB
	stax
:( J
	name:AllRightRotations
	in
ABC
	out
ABC CAB BCA
	stax
:) J
	name:ZipShort
	in
	out
ax by cz
	stax
	name:ZeroRange
	in
	out
0,1,2,3,4
	stax
5r',*
	name:OneRange
	in
	out
1,2,3,4,5
	stax
5R',*
	name:StartEndRange
	in
	out
5 6 7
	stax
5 8 |r J
	name:StartEndStrideRange
	in
	out
5 7 9 11
	stax
5 13 2 |R J
	name:ReverseArray
	in
	out
5,4,3,2,1
	stax
5R r ',*
	name:ConcatArray
	in
	out
1,2,3,1,2,3,4
	stax
3R 4R + ',*
	name:ConcatArrayElement
	in
	out
1,2,3,7
	stax
3R 7 + ',*
	name:RepeatArray
	in
	out
1,2,3,1,2,3
	stax
3R 2* ',*
	name:RepeatArrayBackwards
	in
	out
3,2,1,3,2,1
	stax
3R 2N* ',*
	name:Explode
	in
	out
9
	stax
5R E +
	name:StringArrayEquivalence
	in
	out
97,98,99
	stax
"abc" ',*
	name:ArrayLength
	in
	out
5
	stax
5R%
	name:ReadIndex
	in
	out
3
	stax
5R 2@
	name:ReadIndexes
	in
	out
3,5
	stax
5R 2]1N]+ @ ',*
	name:AssignIndex
	in
	out
1,8,3,4,5
	stax
5R 1 8& ',*
	name:AssignIndexMutate
	in
[1 2 3 4 5]
	out
1 2 3 -4 5
	stax
3{N}&J
	name:AssignIndexAll
	in
	out
1,8,8,4,5
	stax
5R 1 2\ 8& ',*
	name:AssignIndexOOB
	in
	out
1 2 3 0 0 0 77
	stax
3R 6 77& J
	name:AssignIndexNegative
	in
	out
1 2 3 77 5
	stax
5R 2N 77& J
	name:AssignIndexNegativeOOB
	in
	out
77 0 0 1 2 3
	stax
3R 6N 77& J
	name:ArrayToString
	in
	out
12345
	stax
5R$
	name:SingletonWrap
	in
	out
1
	stax
0]%
	name:PairWrap
	in
	out
2
	stax
3 7 \%
	name:Head
	in
	out
1
	stax
5R h
	name:Tail
	in
	out
5
	stax
5R H
	name:Sum
	in
	out
15
	stax
5R |+
	name:MinimumArray
	in
	out
1
	stax
5R oh
	name:MaximumArray
	in
	out
5
	stax
5R oH
	name:Delta
	in
[1 1 3 8]
	out
0 2 5
	stax
:- J
	name:JoinWithNewlines
	in
	out
dc
ba
	stax
"abcd" 2/ |J r
	name:Palindromize
	in
	out
abcbcba
	stax
"abcb" |p
	name:ZipRep
	in
	out
ax,by,cx,dy,ex
	stax
"abcde" "xy" \ ',*
	name:Union
	in
[1 2 2 3 3] [0 1 2]
	out
1,2,2
	stax
|& ',*
	name:SymmetricDiff
	in
[1 2 2 3 3] [0 1 2]
	out
3,3,0
	stax
|^ ',*
	name:CountInTest
	in
[1 2 2 3 3] 3
	out
2
	stax
#
	name:IndexAllArray
	in
[1 2 3 2 1 2 3]
	out
2 6
	stax
3|I J
	name:Uncons
	in
	out
97bcd
	stax
"abcd" B pP
	name:UnconsRight
	in
	out
100abc
	stax
"abcd" N pP
	name:ElementRepeat
	in
	out
111122223333
	stax
3R4|*$
	name:CrossProduct
	in
	out
ax ay az bx by bz cx cy cz
	stax
"abc" "xyz" |* J
	name:SurroundWith
	in
	out
bab
	stax
'a'b |S
	name:GetEveryNth
	in
[1, 2, 3, 4, 5, 6]
	out
1 3 5
	stax
2:: J
	name:Any
	in
[0 0 0 2 0]
	out
1
	stax
|a
	name:All
	in
[0 0 0 2 0]
	out
0
	stax
|A
	name:Mirror
	in
[3 1 7]
	out
3 1 7 7 1 3
	stax
:m J
	name:Squarify
	in
Hello, world!
	out
Hell
o, w
orld
!   
	stax
:J m
	name:Array Product
	in
[4 7 5]
	out
140
	stax
:*
	name:RunLength
	in
[7 7 4 9 9 9]
	out
7 2
4 1
9 3
	stax
|RmJ
	name:IsSuperset
	in
[1 2 3 4 5] [2 4]
	out
1
	stax
:S
	in
[1 2 3 4 5] [2 4 6]
	out
0
	stax
:S
	name:MultisetSubtract
	in
[1 2 2 3 4 5] [2 4 4]
	out
1 2 3 5
	stax
|- J
	name:SingleRemoval
	in
[1 2 2 3 3 4 5] 3
	out
1 2 2 3 4 5
	stax
|- J
	name:RemoveIndex
	in
[2 4 6 8 10]
	out
2 4 6 10
	stax
3 |@ J
	name:InsertAt
	in
[2 4 6 8 10]
	out
2 4 6 99 8 10
	stax
3 99 |@ J
	name:TruthyIndices
	in
[0 0 0 23 0 0 76 0]
	out
3 6
	stax
:1 J
	name:FalsyIndices
	in
[0 0 0 23 0 0 76 0]
	out
0 1 2 4 5 7
	stax
:0 J
	name:FirstTruthyIndex
	in
[0 0 0 23 0 0 76 0]
	out
3
	stax
|1
	name:FirstFalsyIndex
	in
[9 8 4 4 3 6 0 2 3 4]
	out
6
	stax
|0